name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ libspatialindex-dev libgeos-dev libproj-dev proj-data proj-bin libgdal-dev
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest test_main.py -v --cov=. --cov-report=xml || echo "Tests completed with some failures"
      continue-on-error: true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests --silent || echo "Tests completed with some failures"
    
    - name: Build
      run: |
        cd frontend
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
        retention-days: 1

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python linting tools
      run: |
        pip install black isort flake8
    
    - name: Lint Python code
      run: |
        cd backend
        black --check . || echo "Black formatting issues found"
        isort --check-only . || echo "Import sorting issues found"
        flake8 . --max-line-length=88 --extend-ignore=E203,W503 || echo "Flake8 issues found"
      continue-on-error: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint || echo "Frontend linting issues found"
      continue-on-error: true

  build-docker:
    needs: [test-backend, test-frontend, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
    
    - name: Build backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: false
        tags: ev-routing-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: false
        tags: ev-routing-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        docker-compose config
        docker-compose build
    
    - name: Run smoke tests
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/ || exit 1
        docker-compose down